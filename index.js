/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 ///////////////////////////////////////////////////////////          CONSTS / REQUIRES       ///////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 const env = require("dotenv")
 env.config()

/////// agora imports ////////
const cors = require('cors');
// import AgoraRTC from "agora-rtc-sdk-ng";
// import config from "./config.json";


 //jshint esversion:6
const dotenv = require('dotenv')
const express = require("express")
const bodyParser = require("body-parser")
const ejs = require("ejs")
const mongoose = require("mongoose")
// const session = require('express-session')
const encrypt = require('mongoose-encryption')
const md5 = require('md5')
const app = express()
const PORT = process.env.PORT
let missedContentCount = '321'
let pageTitle = ''



////////////   AGORA   ///////////////
const {RtcTokenBuilder, RtcRole} = require('agora-access-token');
const APP_ID = process.env.APP_ID;
const APP_CERTIFICATE = process.env.APP_CERTIFICATE;

///////   Generate the Agora RTC Token   ////////



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////      SET / USE    ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


app.use (express.static('public'));
app.set('view engine', 'ejs');
app.use (bodyParser.urlencoded( {extended:true} ));
// app.use(session({
//   secret: 'i like chocolate milk.',
//   resave: false,
//   saveUninitialized: false,
//   cookie: { secure: true }
// }));



const nocache = (_, resp, next) => {
  resp.header('Cache-Control', 'private, no-cache, no-store, must-revalidate');
  resp.header('Expires', '-1');
  resp.header('Pragma', 'no-cache');
  next();
}

const generateRTCToken = (req, resp) => {

  // set header
  resp.header('Access-Control-Allow-Origin', '*');
  // required channel name, return error if not provided
  const channelName = req.params.channel;
  if (!channelName) {
    return resp.status(500).json({ 'error': 'channel is required' });
  }
  // get uid
  let uid = req.params.uid;
  if(!uid || uid === '') {
    return resp.status(500).json({ 'error': 'uid is required' });
  }
  // get role
  let role;
  if (req.params.role === 'publisher') {
    role = RtcRole.PUBLISHER;
  } else if (req.params.role === 'audience') {
    role = RtcRole.SUBSCRIBER
  } else {
    return resp.status(500).json({ 'error': 'role is incorrect' });
  }
  // get expiry time
  let expireTime = req.query.expiry;
  if (!expireTime || expireTime === '') {
    expireTime = 3600;
  } else {
    expireTime = parseInt(expireTime, 10);
  }
  // calculate expiry time
  const currentTime = Math.floor(Date.now() / 1000);
  const privilegeExpireTime = currentTime + expireTime;
  // build the token
  let token;
  if (req.params.tokentype === 'userAccount') {
    token = RtcTokenBuilder.buildTokenWithAccount(APP_ID, APP_CERTIFICATE, channelName, uid, role, privilegeExpireTime);
  } else if (req.params.tokentype === 'uid') {
    token = RtcTokenBuilder.buildTokenWithUid(APP_ID, APP_CERTIFICATE, channelName, uid, role, privilegeExpireTime);
  } else {
    return resp.status(500).json({ 'error': 'token type is invalid' });
  }
  // return the token
  return resp.json({ 'rtcToken': token });
 };


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////      PAGE ROUTES    ///////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
app.options('*', cors());
app.get('/rtc/:channel/:role/:tokentype/:uid', nocache , generateRTCToken)

app.get("/",function(req,res){
  res.render('index'  , { pageTitle:pageTitle } );
})

app.get("/lobby",function(req,res){
  res.render('lobby'  , { pageTitle:pageTitle } );
})

app.get("/streamer",function(req,res){
  res.render('streamer'  , { pageTitle:pageTitle } );
})

app.get("/viewer",function(req,res){
  res.render('viewer'  , { pageTitle:pageTitle } );
})


app.listen(PORT, () => {
  console.log(`Listening on port: ${PORT}`);
});